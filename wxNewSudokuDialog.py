#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# $Id$
#
#    Copyright (c) 2006 Juan Manuel Gimeno Illa
#    Copyright (C) 2007 Alberto Monta√±ola Lacort
#    See the file AUTHORS for more info
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,
#    USA.
#
#    Please see the file COPYING for the full license.
#
# generated by wxGlade 0.4.1 on Sat Jan 27 00:52:59 2007
#

import wx

class NewSudokuDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: NewSudokuDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.label_1 = wx.StaticText(self, -1, _("Type"))
        self.type = wx.ComboBox(self, -1, choices=[_("Normal"), _("Samurai")], style=wx.CB_DROPDOWN|wx.CB_SIMPLE|wx.CB_READONLY)
        self.label_2 = wx.StaticText(self, -1, _("Block Size"))
        self.brows = wx.ComboBox(self, -1, choices=[_("2"), _("3"), _("4")], style=wx.CB_DROPDOWN|wx.CB_SIMPLE|wx.CB_READONLY)
        self.label_3 = wx.StaticText(self, -1, _("X"))
        self.bcols = wx.ComboBox(self, -1, choices=[_("2"), _("3"), _("4")], style=wx.CB_DROPDOWN|wx.CB_SIMPLE|wx.CB_READONLY)
        self.button_1 = wx.Button(self, -1, _("&Ok"))
        self.button_2 = wx.Button(self, -1, _("&Cancel"))

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_COMBOBOX, self.OnCombo, self.type)
        self.Bind(wx.EVT_BUTTON, self.OnOk, self.button_1)
        self.Bind(wx.EVT_BUTTON, self.OnCancel, self.button_2)
        # end wxGlade
        self.OkStatus=False

    def __set_properties(self):
        # begin wxGlade: NewSudokuDialog.__set_properties
        self.SetTitle(_("Create New Sudoku"))
        self.SetFocus()
        self.type.SetSelection(1)
        self.brows.Enable(False)
        self.brows.SetSelection(1)
        self.bcols.Enable(False)
        self.bcols.SetSelection(1)
        self.button_1.SetDefault()
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: NewSudokuDialog.__do_layout
        grid_sizer_1 = wx.GridSizer(3, 1, 5, 5)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(self.label_1, 0, wx.ADJUST_MINSIZE, 0)
        sizer_1.Add(self.type, 0, 0, 0)
        grid_sizer_1.Add(sizer_1, 1, wx.ALL, 6)
        sizer_2.Add(self.label_2, 0, wx.ALL, 5)
        sizer_2.Add(self.brows, 0, wx.ADJUST_MINSIZE, 0)
        sizer_2.Add(self.label_3, 0, wx.ALL, 5)
        sizer_2.Add(self.bcols, 0, wx.ALL, 5)
        grid_sizer_1.Add(sizer_2, 1, wx.ALL, 6)
        sizer_3.Add(self.button_1, 0, wx.ADJUST_MINSIZE, 0)
        sizer_3.Add(self.button_2, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(sizer_3, 1, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 6)
        self.SetAutoLayout(True)
        self.SetSizer(grid_sizer_1)
        grid_sizer_1.Fit(self)
        grid_sizer_1.SetSizeHints(self)
        self.Layout()
        self.Centre()
        # end wxGlade

    def OnOk(self, event): # wxGlade: NewSudokuDialog.<event_handler>
        self.OkStatus=True
        self.Hide()

    def OnCancel(self, event): # wxGlade: NewSudokuDialog.<event_handler>
        self.Hide()

    def OnCombo(self, event): # wxGlade: NewSudokuDialog.<event_handler>
        if self.type.GetValue()==_("Samurai"):
            self.brows.SetSelection(1)
            self.bcols.SetSelection(1)
            self.brows.Disable()
            self.bcols.Disable()
        else:
            self.brows.Enable()
            self.bcols.Enable()
            

# end of class NewSudokuDialog




